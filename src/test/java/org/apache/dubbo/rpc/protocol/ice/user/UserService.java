//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `UserService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.apache.dubbo.rpc.protocol.ice.user;

public interface UserService extends com.zeroc.Ice.Object {
    String sayHello(String name, com.zeroc.Ice.Current current);

    boolean hasName(boolean hasName, com.zeroc.Ice.Current current);

    String sayHelloTimes(String name, int times, com.zeroc.Ice.Current current);

    float getMoney(float value, com.zeroc.Ice.Current current);

    String context(String name, com.zeroc.Ice.Current current);

    /**
     * @hidden
     */
    static final String[] _iceIds =
            {
                    "::Ice::Object",
                    "::user::UserService"
            };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current) {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current) {
        return ice_staticId();
    }

    static String ice_staticId() {
        return "::user::UserService";
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sayHello(UserService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        String ret = obj.sayHello(iceP_name, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_hasName(UserService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_hasName;
        iceP_hasName = istr.readBool();
        inS.endReadParams();
        boolean ret = obj.hasName(iceP_hasName, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sayHelloTimes(UserService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        int iceP_times;
        iceP_name = istr.readString();
        iceP_times = istr.readInt();
        inS.endReadParams();
        String ret = obj.sayHelloTimes(iceP_name, iceP_times, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMoney(UserService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_value;
        iceP_value = istr.readFloat();
        inS.endReadParams();
        float ret = obj.getMoney(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_context(UserService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        String ret = obj.context(iceP_name, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     */
    final static String[] _iceOps =
            {
                    "context",
                    "getMoney",
                    "hasName",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "sayHello",
                    "sayHelloTimes"
            };

    /**
     * @hidden
     */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if (pos < 0) {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch (pos) {
            case 0: {
                return _iceD_context(this, in, current);
            }
            case 1: {
                return _iceD_getMoney(this, in, current);
            }
            case 2: {
                return _iceD_hasName(this, in, current);
            }
            case 3: {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4: {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5: {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6: {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7: {
                return _iceD_sayHello(this, in, current);
            }
            case 8: {
                return _iceD_sayHelloTimes(this, in, current);
            }
        }

        assert (false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}

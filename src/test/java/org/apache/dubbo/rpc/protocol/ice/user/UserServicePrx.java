//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `UserService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package org.apache.dubbo.rpc.protocol.ice.user;

public interface UserServicePrx extends com.zeroc.Ice.ObjectPrx {
    default String sayHello(String name) {
        return sayHello(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String sayHello(String name, java.util.Map<String, String> context) {
        return _iceI_sayHelloAsync(name, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> sayHelloAsync(String name) {
        return _iceI_sayHelloAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> sayHelloAsync(String name, java.util.Map<String, String> context) {
        return _iceI_sayHelloAsync(name, context, false);
    }

    /**
     * @param iceP_name -
     * @param context   -
     * @param sync      -
     * @return -
     * @hidden
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_sayHelloAsync(String iceP_name, java.util.Map<String, String> context, boolean sync) {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sayHello", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
            ostr.writeString(iceP_name);
        }, istr -> {
            String ret;
            ret = istr.readString();
            return ret;
        });
        return f;
    }

    default boolean hasName(boolean hasName) {
        return hasName(hasName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean hasName(boolean hasName, java.util.Map<String, String> context) {
        return _iceI_hasNameAsync(hasName, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> hasNameAsync(boolean hasName) {
        return _iceI_hasNameAsync(hasName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> hasNameAsync(boolean hasName, java.util.Map<String, String> context) {
        return _iceI_hasNameAsync(hasName, context, false);
    }

    /**
     * @param iceP_hasName -
     * @param context      -
     * @param sync         -
     * @return -
     * @hidden
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_hasNameAsync(boolean iceP_hasName, java.util.Map<String, String> context, boolean sync) {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "hasName", null, sync, null);
        f.invoke(true, context, null, ostr -> {
            ostr.writeBool(iceP_hasName);
        }, istr -> {
            boolean ret;
            ret = istr.readBool();
            return ret;
        });
        return f;
    }

    default String sayHelloTimes(String name, int times) {
        return sayHelloTimes(name, times, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String sayHelloTimes(String name, int times, java.util.Map<String, String> context) {
        return _iceI_sayHelloTimesAsync(name, times, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> sayHelloTimesAsync(String name, int times) {
        return _iceI_sayHelloTimesAsync(name, times, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> sayHelloTimesAsync(String name, int times, java.util.Map<String, String> context) {
        return _iceI_sayHelloTimesAsync(name, times, context, false);
    }

    /**
     * @param iceP_name  -
     * @param iceP_times -
     * @param context    -
     * @param sync       -
     * @return -
     * @hidden
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_sayHelloTimesAsync(String iceP_name, int iceP_times, java.util.Map<String, String> context, boolean sync) {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sayHelloTimes", null, sync, null);
        f.invoke(true, context, null, ostr -> {
            ostr.writeString(iceP_name);
            ostr.writeInt(iceP_times);
        }, istr -> {
            String ret;
            ret = istr.readString();
            return ret;
        });
        return f;
    }

    default float getMoney(float value) {
        return getMoney(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getMoney(float value, java.util.Map<String, String> context) {
        return _iceI_getMoneyAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMoneyAsync(float value) {
        return _iceI_getMoneyAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> getMoneyAsync(float value, java.util.Map<String, String> context) {
        return _iceI_getMoneyAsync(value, context, false);
    }

    /**
     * @param iceP_value -
     * @param context    -
     * @param sync       -
     * @return -
     * @hidden
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_getMoneyAsync(float iceP_value, java.util.Map<String, String> context, boolean sync) {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMoney", null, sync, null);
        f.invoke(true, context, null, ostr -> {
            ostr.writeFloat(iceP_value);
        }, istr -> {
            float ret;
            ret = istr.readFloat();
            return ret;
        });
        return f;
    }

    default String context(String name) {
        return context(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String context(String name, java.util.Map<String, String> context) {
        return _iceI_contextAsync(name, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> contextAsync(String name) {
        return _iceI_contextAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> contextAsync(String name, java.util.Map<String, String> context) {
        return _iceI_contextAsync(name, context, false);
    }

    /**
     * @param iceP_name -
     * @param context   -
     * @param sync      -
     * @return -
     * @hidden
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_contextAsync(String iceP_name, java.util.Map<String, String> context, boolean sync) {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "context", null, sync, null);
        f.invoke(true, context, null, ostr -> {
            ostr.writeString(iceP_name);
        }, istr -> {
            String ret;
            ret = istr.readString();
            return ret;
        });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj) {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param obj     The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context) {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param obj   The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet) {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param obj     The untyped proxy.
     * @param facet   The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static UserServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context) {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static UserServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj) {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param obj   The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static UserServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet) {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, UserServicePrx.class, _UserServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     *
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default UserServicePrx ice_context(java.util.Map<String, String> newContext) {
        return (UserServicePrx) _ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     *
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default UserServicePrx ice_adapterId(String newAdapterId) {
        return (UserServicePrx) _ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     *
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default UserServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints) {
        return (UserServicePrx) _ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     *
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default UserServicePrx ice_locatorCacheTimeout(int newTimeout) {
        return (UserServicePrx) _ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     *
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default UserServicePrx ice_invocationTimeout(int newTimeout) {
        return (UserServicePrx) _ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     *
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default UserServicePrx ice_connectionCached(boolean newCache) {
        return (UserServicePrx) _ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     *
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default UserServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType) {
        return (UserServicePrx) _ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     *
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     *          used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     *          insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default UserServicePrx ice_secure(boolean b) {
        return (UserServicePrx) _ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     *
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default UserServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e) {
        return (UserServicePrx) _ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     *
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     *          and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     *          <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default UserServicePrx ice_preferSecure(boolean b) {
        return (UserServicePrx) _ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     *
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default UserServicePrx ice_router(com.zeroc.Ice.RouterPrx router) {
        return (UserServicePrx) _ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     *
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default UserServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator) {
        return (UserServicePrx) _ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     *
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default UserServicePrx ice_collocationOptimized(boolean b) {
        return (UserServicePrx) _ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     *
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default UserServicePrx ice_twoway() {
        return (UserServicePrx) _ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     *
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default UserServicePrx ice_oneway() {
        return (UserServicePrx) _ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     *
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default UserServicePrx ice_batchOneway() {
        return (UserServicePrx) _ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     *
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default UserServicePrx ice_datagram() {
        return (UserServicePrx) _ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     *
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default UserServicePrx ice_batchDatagram() {
        return (UserServicePrx) _ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     *
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default UserServicePrx ice_compress(boolean co) {
        return (UserServicePrx) _ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     *
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default UserServicePrx ice_timeout(int t) {
        return (UserServicePrx) _ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     *
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default UserServicePrx ice_connectionId(String connectionId) {
        return (UserServicePrx) _ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     *
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default UserServicePrx ice_fixed(com.zeroc.Ice.Connection connection) {
        return (UserServicePrx) _ice_fixed(connection);
    }

    static String ice_staticId() {
        return "::user::UserService";
    }
}
